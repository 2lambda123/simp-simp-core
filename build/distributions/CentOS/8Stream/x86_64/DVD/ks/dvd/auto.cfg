text
cdrom
keyboard --xlayouts=us
lang en_US

%include /mnt/install/repo/ks/dvd/include/common_ks_base
%include /mnt/install/repo/ks/dvd/include/simp_ks_base

%pre

SOURCE="/mnt/source"

cp /mnt/install/repo/ks/repodetect.sh /tmp;
cp /mnt/install/repo/ks/diskdetect.sh /tmp;

chmod +x /tmp/*.sh

# /mnt/source is used in the scripts to be compatable with other dvds
# Make sure the Centos 8 source is mounted to /mnt/source
if [ -b /dev/cdrom ]; then
  if [ ! -d "$SOURCE" ]; then
    mkdir "$SOURCE";
  fi
  if [ ! -d "$SOURCE/BaseOS" ]; then
    mount --bind /mnt/install/repo $SOURCE;
  fi
fi
# Run these scripts to create the output.
/tmp/repodetect.sh '8'
/tmp/diskdetect.sh

# Prep for selecting the correct dracut to install
use_fips=`awk -F "fips=" '{print $2}' /proc/cmdline | cut -f1 -d' '`

if [ "$use_fips" == "0" ]; then
  echo 'dracut' > /tmp/dracut_packages
else
  echo 'dracut-fips' > /tmp/dracut_packages
fi
%end

%post --nochroot --erroronfail --log=/mnt/sysimage/var/log/anaconda/ks-post-nochroot.log

print_info () {
  if [ -n "$1" ]; then
    echo -e "[*] INFO: $1"
  fi
}

print_warn () {
  if [ -n "$1" ]; then
    echo "$1" >> ${SYSIMAGE}/root/postinstall.err
    echo -e "[!] WARNING: $1"
  fi
}

print_err () {
  if [ -n "$1" ]; then
    echo "$1" >> ${SYSIMAGE}/root/postinstall.err
    echo -e "[!] ERROR: $1"
  fi
}

# SOURCE is the DVD; SYSIMAGE is the chroot'd root dir
SOURCE="/mnt/source"
SYSIMAGE="/mnt/sysimage"

# Need to switch this to tmux
exec < /dev/tty6 > /dev/tty6 2> /dev/tty6
chvt 6

(

  # bind mounts don't keep through reboots so make sure
  # the dvd is mounted to /mnt/source
  if [ -b /dev/cdrom ]; then
    if [ ! -d "$SOURCE" ]; then
      mkdir "$SOURCE";
    fi
    if [ ! -d "$SOURCE/BaseOS" ]; then
      mount --bind /mnt/install/repo $SOURCE;
    fi
  fi

  # If we dropped a LUKS key-file, we need to copy it into place.
  if [ -f /boot/disk_creds ]; then
    print_info 'Setting up LUKS credentials'

    cp /boot/disk_creds $SYSIMAGE/etc/.cryptcreds
    chown root:root $SYSIMAGE/etc/.cryptcreds
    chmod 400 $SYSIMAGE/etc/.cryptcreds

    crypt_disk=`cat /boot/crypt_disk`
    for x in /dev/$crypt_disk*; do
      if `cryptsetup isLuks $x`; then
        crypt_partition="$x"
        break
      fi
    done

    if [ -z "$crypt_partition" ]; then
      print_err 'Could not find the encrypted partition'
      exit 1
    fi

    print_info 'Updating the LUKS keys, this may take some time....'
    cryptsetup luksChangeKey --key-slot 0 --key-file /boot/disk_creds $crypt_partition /boot/disk_creds

    # Modify the crypttab file
    crypt_uuid=`cryptsetup luksDump ${crypt_partition} | grep UUID | sed 's/[[:space:]]\+/ /g' | cut -f2 -d' '`

    # If we got here, and this is blank, fail hard!
    if [ -z "$crypt_uuid" ]; then
      print_err 'Could not find crypt_uuid'
      exit 1
    fi

    echo "luks-${crypt_uuid} UUID=${crypt_uuid} /etc/.cryptcreds luks" > $SYSIMAGE/etc/crypttab

    print_info 'Finished setting up LUKS credentials'
  fi

  if [ -f "${SYSIMAGE}/opt/puppetlabs/puppet/bin/facter" ]; then
    facter="chroot ${SYSIMAGE} /opt/puppetlabs/puppet/bin/facter"
  else
    facter="chroot ${SYSIMAGE} facter"
  fi

  # Get the Linux distribution
  ostype=`$facter operatingsystem`
  rhversion=`$facter operatingsystemrelease`
  majrhversion=`$facter operatingsystemmajrelease`
  htype=`$facter architecture`

  UMASKSAVE=`umask`
  umask 0002

  # Copy the repos over to the yum directory

  OS_YUM_DIR="${SYSIMAGE}/var/www/yum/${ostype}/${rhversion}/${htype}"
  SIMP_YUM_DIR="${SYSIMAGE}/var/www/yum/SIMP/${ostype}/${rhversion}/${htype}"

  mkdir -p "$OS_YUM_DIR"
  mkdir -p "$SIMP_YUM_DIR"

  (
    cd ${SOURCE}

    if [ $? -ne 0 ]; then
      print_warn "There was a problem changing directory to ${SOURCE}, the DVD will not be copied to disk."
    else
      SIMP_REPOS_DIR="${OS_YUM_DIR}/SimpRepos"

      # Copy the entire disk to /var/www/yum
      print_info "Copying the ISO to '${OS_YUM_DIR}'"
      rsync -a --info=progress2 --stats . "${OS_YUM_DIR}"
      print_info "Done copying the ISO to '${OS_YUM_DIR}'"

      # Copy the GPGkeys
      mkdir -p ${SYSIMAGE}/var/www/yum/SIMP/GPGKEYS
      for key in $( find "${OS_YUM_DIR}" -type f -name 'RPM-GPG-KEY-SIMP*' ); do
        print_info "Copying GPG key '${key}'"
        cp -a ${key} ${SYSIMAGE}/var/www/yum/SIMP/GPGKEYS
        print_info "Done copying GPG key '${key}'"
      done

      # Move all the SimpRepos repos under the SIMP yum directory.
      print_info "Copying the SIMP repos into ${SIMP_YUM_DIR}"
      for dir in "${SIMP_REPOS_DIR}"/*; do
        if [ -d  "${dir}"/repodata ]; then
          cp -al "${dir}" "${SIMP_YUM_DIR}"
        fi
      done
      print_info "Done copying the SIMP repos into ${SIMP_YUM_DIR}"

      print_info "Cleaning up the temporary repos direcotry"
      find "${SIMP_REPOS_DIR}" -delete 2>/dev/null ||:
      print_info "Done cleaning up the temporary repos direcotry"

      # Move the kickstart files
      print_info "Installing the kickstart files into '${SYSIMAGE}/var/www'"
      cp -a "${OS_YUM_DIR}/ks" "${SYSIMAGE}/var/www/"
      print_info "Done installing the kickstart files into '${SYSIMAGE}/var/www'"

      #Clean up directories that are not needed in the yum repo
      print_info "Removing unnecessary files from '${OS_YUM_DIR}'"
      rm -rf "${OS_YUM_DIR}/Config"
      rm -rf "${OS_YUM_DIR}/*simp_pkglist.txt"
      print_info "Done removing unnecessary files from '${OS_YUM_DIR}'"

      #If this is a developement ISO it will have a dev key. Copy that to the correct place.
      if [ -e RPM-GPG-KEY-SIMP-Dev ]; then
        print_info 'Copying in the SIMP Development GPG Key'
        mkdir -p ${SYSIMAGE}/var/www/yum/SIMP-Dev/GPGKEYS
        mv "${OS_YUM_DIR}/RPM-GPG-KEY-SIMP-Dev" ${SYSIMAGE}/var/www/yum/SIMP-Dev/GPGKEYS
        print_info 'Done copying in the SIMP Development GPG Key'
      fi
    fi

    if [ ! -d "${SYSIMAGE}/var/www/yum/${ostype}/${majrhversion}" ]; then
      ostype_dir="${SYSIMAGE}/var/www/yum/${ostype}"
      print_info "Creating '${ostype_dir}'"
      (
        cd "${ostype_dir}"
        ln -sf $rhversion $majrhversion
      )
      print_info "Done creating '${ostype_dir}'"
    fi

    if [ ! -d "${SYSIMAGE}/var/www/yum/SIMP/${ostype}/${majrhversion}" ]; then
      ostype_dir="${SYSIMAGE}/var/www/yum/SIMP/${ostype}"
      print_info "Creating '${ostype_dir}'"
      (
        cd "${ostype_dir}"
        ln -sf $rhversion $majrhversion
      )
      print_info "Done creating '${ostype_dir}'"
    fi
  )

  umask $UMASKSAVE
  umount "${SOURCE}"

  print_info "Cleaning up permissions"
  chown -R root.48 ${SYSIMAGE}/var/www;
  chmod -R u=rwX,g=rX,o-rwx ${SYSIMAGE}/var/www;
  print_info "Done cleaning up permissions"

) 2>&1 | tee ${SYSIMAGE}/var/log/anaconda/ks-post-nochroot.log

  # Don't care if this fails.
  eject /tmp/cdrom 2>/dev/null || true

# Give folks at least a chance to glance at the log output
sleep 10
chvt 1
exec < /dev/tty1 > /dev/tty1 2> /dev/tty1

%end

%post --log=/var/log/anaconda/ks-post.log

# For the new binaries if they exist
export PATH=/opt/puppetlabs/bin:$PATH

# FIPS
use_fips=`awk -F "fips=" '{print $2}' /proc/cmdline | cut -f1 -d' '`

if [ "$use_fips" != "0" ]; then
  BOOTDEV=`df /boot | tail -1 | cut -f1 -d' '`
  BOOTUUID=`blkid ${BOOTDEV} -o export | grep ^UUID`
  DEFAULT_KERNEL_INFO=$(basename $(/sbin/grubby --default-kernel))
  DEFAULT_INITRD=$(basename $(/sbin/grubby --info=DEFAULT | grep initrd | cut -f2 -d'='))
  DEFAULT_KERNEL_TITLE=`/sbin/grubby --default-title`

  # In case you need a working fallback
  DEFAULT_KERNEL_TITLE=`/sbin/grubby --info=${DEFAULT_KERNEL_INFO} | grep -m1 title | cut -f2 -d'='`
  /sbin/grubby --copy-default --make-default \
   --args="boot=${BOOTUUID} fips=1" \
   --add-kernel=${DEFAULT_KERNEL_INFO} \
   --initrd=${DEFAULT_INITRD} \
   --title="FIPS ${DEFAULT_KERNEL_TITLE}"
fi

# For the disk crypto
if [ -f "/etc/.cryptcreds" ]; then
  echo 'install_items+=" /etc/.cryptcreds "' >> /etc/dracut.conf
fi

for x in `ls -d /lib/modules/*`; do
  installed_kernel=`basename $x`
  dracut -f "/boot/initramfs-${installed_kernel}.img" $installed_kernel
done

if [ "$use_fips" != "0" ]; then
  /usr/bin/fips-mode-setup --enable
else
  /usr/bin/fips-mode-setup --disable
fi

sed -i 's/--class os/--class os --unrestricted/g' /boot/grub2/grub.cfg

ostype=`facter os.name`
rhversion=`facter os.release.full`
majrhversion=`facter os.release.major`

htype=`facter architecture`
# Define simp_filesystem.repo
frhbase_gpg_file=''
case "$ostype" in
  RedHat) frhbase_gpg_file='file:///var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-redhat-release'
    ;;
  CentOS) frhbase_gpg_file="file:///var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-CentOS-$majrhversion"
    ;;
  *) echo "No '[frhbase]' GPG Keys are known for ostype '${ostype}'."
    exit 1
    ;;
esac

SIMP_REPO_DIR=/var/www/yum/SIMP/$ostype/$rhversion/$htype

if [ -d $SIMP_REPO_DIR ]; then
  cd $SIMP_REPO_DIR

  # While other logic should pick this up, the directory must exist so that the
  # simp-gpgkeys package will copy items in properly post-ISO installation.
  mkdir GPGKEYS

  # some repos are specific to the environment
  flocal_gpg_files=()

  if [ -n "$frhbase_gpg_file" ]; then
    flocal_gpg_files+=("$frhbase_gpg_file")
  fi

  if [ -e /var/www/yum/SIMP-Dev/GPGKEYS/RPM-GPG-KEY-SIMP-Dev ]; then
    flocal_gpg_simp=('file:///var/www/yum/SIMP-Dev/GPGKEYS/RPM-GPG-KEY-SIMP-Dev')
  fi


  flocal_gpg_file_lines="$(IFS=$'\n'; echo "${flocal_gpg_files[*]}" | sed -e 's/^\([a-z]\)/    \1/g' -e '/^[[:space:]]*$/d')"
  flocal_gpg_simp_lines="$(IFS=$'\n'; echo "${flocal_gpg_simp[*]}" | sed -e 's/^\([a-z]\)/    \1/g' -e '/^[[:space:]]*$/d')"

  cat << EOF >> /etc/yum.repos.d/simp_filesystem.repo
[flocal-simp]
name=Local simp within the filesystem
baseurl=file://${SIMP_REPO_DIR}/SIMP
enabled=1
gpgcheck=1
gpgkey=file:///var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-SIMP-6
    file:///var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-SIMP
$flocal_gpg_simp_lines

[flocal-puppet]
name=Local puppet within the filesystem
baseurl=file://${SIMP_REPO_DIR}/puppet
enabled=1
gpgcheck=1
gpgkey=file:///var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-puppet
    file:///var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-puppetlabs
    file:///var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-puppet-20250406

[flocal-powertools]
name=Local powertools within the filesystem
baseurl=file://${SIMP_REPO_DIR}/PowerTools
enabled=1
gpgcheck=1
gpgkey=file:///var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-EPEL-$majrhversion
$flocal_gpg_file_lines

[flocal-extras]
name=Local extras repo within the filesystem
baseurl=file://${SIMP_REPO_DIR}/extras
enabled=1
gpgcheck=1
gpgkey=file:///var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-EPEL-$majrhversion
$flocal_gpg_file_lines

[flocal-epel]
name=Local epel repo within the filesystem
baseurl=file://${SIMP_REPO_DIR}/epel
enabled=1
gpgcheck=1
gpgkey=file:///var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-EPEL-$majrhversion
$flocal_gpg_file_lines

EOF

fi

  cat << EOF >> /etc/yum.repos.d/simp_filesystem.repo

[frhbase-baseos]
name=$ostype $rhversion base repo
baseurl=file:///var/www/yum/$ostype/$rhversion/$htype/BaseOS
enabled=1
gpgcheck=1
gpgkey=${frhbase_gpg_file}

[frhbase-appstream]
name=$ostype $rhversion appstream repo
baseurl=file:///var/www/yum/$ostype/$rhversion/$htype/AppStream
enabled=1
gpgcheck=1
gpgkey=${frhbase_gpg_file}
EOF

# Disable all the (internet-only) .repo files CentOS kickstarts install
if [ -f /etc/centos-release ]; then
  sed -i -e '/enabled=/d' -e 's/^\(\[.*\]\)/\1\nenabled=0/g' \
    /etc/yum.repos.d/CentOS-*.repo
fi

yum clean all;

# Install GPG keys packaged with the ISO

for key in /var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-*; do
  rpm --import "${key}"
done

if [ -n "$frhbase_gpg_file" ]; then
  rpm --import `echo $frhbase_gpg_file | sed 's/file:\/\///'`
fi

if [ -e /var/www/yum/SIMP-Dev/GPGKEYS/RPM-GPG-KEY-SIMP-Dev ]; then
  rpm --import /var/www/yum/SIMP-Dev/GPGKEYS/RPM-GPG-KEY-SIMP-Dev
fi

# Create 'simp' user
pass_hash='$6$5SnplwrFxmHy4j/v$WgcZV1.W6/wQq1SJh/gnV7E5Tr1iIuJgdCFmhdlzHnCdWR927Q/Q4eKZXtFAVOY7eNRb3e30ezM5xbmP8G7t50'

groupadd -g 1777 simp >& /dev/null;
useradd -d /var/local/simp -g simp -m -p $pass_hash -s /bin/bash -u 1777 -K PASS_MAX_DAYS=90 -K PASS_MIN_DAYS=1 -K PASS_WARN_AGE=7 simp >& /dev/null;
usermod -aG wheel simp;
chage -d 0 root;
chage -d 0 simp;

pam_mod="password     requisite     pam_pwquality.so try_first_pass retry=3 reject_username enforce_for_root\n"
for auth_file in password system; do
  # A double check to make sure we're not running this on a managed system...
  if [ -f /etc/pam.d/${auth_file}-auth ] && [ -z `grep 'Puppet' /etc/pam.d/${auth_file}-auth` ]; then
    # Remove the items that will double prompt us out of the box
    sed -i "/pam_\(pwquality\|cracklib\).so/d" /etc/pam.d/${auth_file}-auth
    # Add our cracklib line
    sed -i "s/\(password.*pam_unix.so.*\)/${pam_mod}\1/" /etc/pam.d/${auth_file}-auth
  fi
done

if [ ! -f /etc/security/pwquality.conf ]  || [[ -f /etc/security/pwquality.conf  &&  -z `grep  'Puppet' /etc/security/pwquality.conf` ]]; then
  cat <<EOF > /etc/security/pwquality.conf
difok = 4
minlen = 15
dcredit = -1
ucredit = -1
lcredit = -1
ocredit = -1
minclass = 3
maxrepeat = 2
maxclassrepeat = 3
maxsequence = 4
gecoscheck = 1
EOF
fi


# FIXME: This is a hack to get the keys sorted easily
echo "Fix the GPG keys"
rpm -q --scripts simp-gpgkeys | grep -v scriptlet | bash

chmod 0644 /etc/security/pwquality.conf

simp_opt=`awk -F "simp_opt=" '{print $2}' /proc/cmdline | cut -f1 -d' '`

# create marker file that indicates a SIMP ISO install
mkdir -p /etc/simp
echo "Kickstarted from SIMP ISO" > /etc/simp/.iso_install
%end
