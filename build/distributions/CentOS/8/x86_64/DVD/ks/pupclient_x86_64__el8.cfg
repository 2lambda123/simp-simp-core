#
# Use the following Ruby code to generate your rootpw hash:
#   ruby -r 'digest/sha2' -e 'puts "password".crypt("$6$" + rand(36**8).to_s(36))'
#
# Use the following command to generate your grub password hash:
#   grub2-mkpasswd-pbkdf2
#
# Replace the following strings in this file
# #BOOTPASS# - Your hashed bootloader password
# #ROOTPASS# - Your hashed root password
# #KSSERVER# - The IP address of your Kickstart server
# #YUMSERVER# - The IP address of your YUM server
# #LINUXDIST# - The LINUX Distribution you are kickstarting
#        - Current CASE SENSITIVE options: RedHat CentOS

# anaconda has known issues when fips is turned on during boot, so it (fips=1)  was remove from bootloader line.
# see url: https://groups.google.com/forum/?fromgroups#!topic/simp-announce/3pBQDZl1OVc
authconfig --enableshadow --passalgo=sha512
bootloader --location=mbr --append="console=ttyS1,57600 console=tty1" --iscrypted --password=#BOOTPASS#
rootpw --iscrypted #ROOTPASS#
firewall --enabled --ssh
firstboot --disable
logging --level=info
selinux --enforcing

text
zerombr
clearpart --none --initlabel
%include /tmp/part-include
skipx
%include /tmp/repo-include

keyboard us
lang en_US
url --noverifyssl --url=https://#YUMSERVER#/yum/CentOS/8/x86_64/BaseOS

network --bootproto=dhcp
reboot

%packages 
-sendmail
acl
aide
bzip2
chrony
crontabs
dracut
## Uncomment the previous line and comment out the line below to disable
## checking FIPS compliance at boot.
#dracut-fips
fipscheck
git
grub2-efi-x64
iptables
irqbalance
krb5-workstation
libaio
libutempter
logrotate
logwatch
lsof
lsscsi
mdadm
microcode_ctl
mutt
net-snmp
net-tools
netlabel_tools
pciutils
psacct
quota
redhat-lsb
rsync
rsyslog
shim-x64
smartmontools
sssd
stunnel
subversion
sudo
sysstat
tmpwatch
unzip
usbutils
vim-enhanced
wget
which
zip
# Puppet stuff
puppet-agent
# In case of broken repo, these should be installed.
hdparm
kbd
libhugetlbfs
policycoreutils
rootfiles
selinux-policy-targeted
setserial
sysfsutils
# Don't install these
-rhn-check
-rhn-setup
-rhnsd
-subscription-manager
%end

%pre
ksserver="#KSSERVER#"
#pull down disk and repo scripts from kickstart server and run them
# to create the included files.
wget --no-check-certificate -O /tmp/diskdetect.sh https://$ksserver/ks/diskdetect_el8.sh;
chmod 750 /tmp/diskdetect.sh;
/tmp/diskdetect.sh;

wget --no-check-certificate -O /tmp/repodetect.sh https://$ksserver/ks/repodetect_el8.sh;
chmod 750 /tmp/repodetect.sh;
/tmp/repodetect.sh '8' $ksserver 'CentOS';

%end

%post --nochroot --erroronfail

SYSIMAGE="/mnt/sysimage"

# If we dropped a LUKS key-file, we need to copy it into place.
if [ -f /boot/disk_creds ]; then
  cp /boot/disk_creds $SYSIMAGE/etc/.cryptcreds
  chown root:root $SYSIMAGE/etc/.cryptcreds
  chmod 400 $SYSIMAGE/etc/.cryptcreds

  crypt_disk=`cat /boot/crypt_disk`
  for x in /dev/$crypt_disk*; do
    if `cryptsetup isLuks $x`; then
      crypt_partition="$x"
      break
    fi
  done

  if [ -z "$crypt_partition" ]; then
    echo "Error: Could not find the encrypted partition"
    exit 1
  fi

  exec < /dev/tty6 > /dev/tty6 2> /dev/tty6
  chvt 6

  echo "Updating the LUKS keys, this may take some time...."

  # We need to make sure our keyfile lands in slot 0 and EL6 doesn't have the
  # luksChangeKey command
  cryptsetup luksAddKey --key-slot 1 --key-file /boot/disk_creds $crypt_partition /boot/disk_creds
  cryptsetup luksKillSlot --key-file /boot/disk_creds $crypt_partition 0

  cryptsetup luksAddKey --key-slot 0 --key-file /boot/disk_creds $crypt_partition /boot/disk_creds
  cryptsetup luksKillSlot --key-file /boot/disk_creds $crypt_partition 1

  # Modify the crypttab file
  crypt_uuid=`cryptsetup luksDump ${crypt_partition} | grep UUID | sed 's/[[:space:]]\+/ /g' | cut -f2 -d' '`

  chvt 1
  exec < /dev/tty1 > /dev/tty1 2> /dev/tty1

  # If we got here, and this is blank, fail hard!
  if [ -z "$crypt_uuid" ]; then
    echo "Error: Could not find crypt_uuid"
    exit 1
  fi

  echo "luks-${crypt_uuid} UUID=${crypt_uuid} /etc/.cryptcreds luks" > $SYSIMAGE/etc/crypttab
fi
%end

%post
if [ -f /etc/centos-release ]; then
  sed -i '/enabled=/d' /etc/yum.repos.d/CentOS-Base.repo;
  sed -i '/\[.*\]/ a\
enabled=0' /etc/yum.repos.d/CentOS-Base.repo;
  sed -i '/enabled=/d' /etc/yum.repos.d/CentOS-AppStream.repo;
  sed -i '/\[.*\]/ a\
enabled=0' /etc/yum.repos.d/CentOS-AppStream.repo;
fi


## Comment out/delete the following block of commands if you want to disable FIPS compliance. ##
### START FIPS ###

# In case you need a working fallback
BOOTDEV=`df /boot | tail -1 | cut -f1 -d' '`
DEFAULT_KERNEL_INFO=`/sbin/grubby --default-kernel`
DEFAULT_INITRD=`/sbin/grubby --info=${DEFAULT_KERNEL_INFO} | grep initrd | cut -f2 -d'='`
DEFAULT_KERNEL_TITLE=`/sbin/grubby --info=${DEFAULT_KERNEL_INFO} | grep -m1 title | cut -f2 -d'='`
/sbin/grubby --copy-default --make-default --add-kernel=`/sbin/grubby --default-kernel` --initrd=${DEFAULT_INITRD} --title="FIPS ${DEFAULT_KERNEL_TITLE}"
# Remove ALL fips= duplicates and force fips=1.
until [ "$(/sbin/grubby --info=${DEFAULT_KERNEL_INFO} | grep args | grep -o fips | wc -l)" -eq 0 ]; do
  $(/sbin/grubby --remove-args="fips" --update-kernel ${DEFAULT_KERNEL_INFO})
done
/sbin/grubby --args="boot=${BOOTDEV} fips=1" --update-kernel ${DEFAULT_KERNEL_INFO}


# For the disk crypto
if [ -f "/etc/.cryptcreds" ]; then
  echo 'install_items+="/etc/.cryptcreds"' >> /etc/dracut.conf
fi

for x in `ls -d /lib/modules/*`; do
  installed_kernel=`basename $x`
  dracut -f "/boot/initramfs-${installed_kernel}.img" $installed_kernel
done

### END FIPS ####


ksserver="#KSSERVER#"

echo "Welcome to SIMP!  If this is firstboot, SIMP bootstrap is scheduled to run.
If this host is not autosigned by Puppet, sign your Puppet certs to begin bootstrap.
Otherwise, it should already be running! Tail /root/puppet.bootstrap.log for details.
Wait for completion and reboot.

To remove this message, delete /root/.bootstrap_msg" > /root/.bootstrap_msg
sed -i "2i if [ -f /root/.bootstrap_msg ]\nthen\n  cat /root/.bootstrap_msg\nfi" /root/.bashrc
source /root/.bashrc

# Enable wait-online
systemctl enable NetworkManager-wait-online

# Enable the firstboot bootstrapping script.
wget --no-check-certificate -O /etc/systemd/system/simp_client_bootstrap.service https://$ksserver/ks/simp_client_bootstrap.service;
chmod 644 /etc/systemd/system/simp_client_bootstrap.service;
wget --no-check-certificate -O /usr/local/sbin/bootstrap_simp_client https://$ksserver/ks/bootstrap_simp_client;
chmod 700  /usr/local/sbin/bootstrap_simp_client

systemctl enable simp_client_bootstrap.service;
%end
