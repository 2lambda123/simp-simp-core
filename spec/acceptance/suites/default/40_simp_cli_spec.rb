require 'spec_helper_integration'

test_name 'simp cli operations'

#################################################################
# This test ASSUMES an existing, production SIMP omni-environment
#################################################################

# facts gathered here are executed when the file first loads and
# use the factor gem temporarily installed into system ruby
master      = only_host_with_role(hosts, 'master')
master_fqdn = fact_on(master, 'fqdn')
agents      = hosts_with_role(hosts, 'agent')

describe 'simp cli operations' do

  let(:puppetserver_status_cmd) { puppetserver_status_command(master_fqdn) }

  let(:puppet_env_dir) { '/etc/puppetlabs/code/environments' }
  let(:secondary_env_dir) { '/var/simp/environments' }
  let(:writable_env_dir) {
    result = on(master, 'puppet config print --environment=production --section=master statedir')
    File.expand_path('../simp/environments', result.stdout.strip)
  }

  context 'pre-test convergence' do
    # /etc/security/opasswd file seluser needs to be fixed after password tests
    # have run
    it 'should ensure all agents are converged' do
      block_on(agents, :run_in_parallel => false) do |agent|
        retry_on(agent, 'puppet agent -t',
          :desired_exit_codes => [0],
          :retry_interval     => 15,
          :max_retries        => 5,
          :verbose            => true.to_s  # work around beaker bug
        )
      end
    end
  end

  context "'simp config' reconfiguration" do
    it 'should fail with default args when production environment exists' do
      on(master, 'simp config -a /root/.simp/simp_conf.yaml', :acceptable_exit_codes => [1])
    end

    it 'should succeed with --force-config when production environment exists' do
      # This is ugly... A least 1 previous test has overwritten the
      # <puppetserver>.yaml file with contents from a Ruby Hash to_yaml().
      # The indentation of arrays provided by to_yaml() is **DIFFERENT** than
      # 'simp config' expects. ('simp config' intentionally doesn't use Ruby
      # yaml parsing/output operations when modifying the <puppetserver>.yaml
      # file, because it wants to preserve all the comments in that file.
      # This means when it inserts/replaces entries in the simp::classes array,
      # it does so with strings having the same indentation as the initial
      # <puppetserver>.yaml template file.)  Unfortunately Psych doesn't
      # have an output option to specify array indentation.  (The
      # Psych.dump() :indentation option doesn't do this.) So, to ensure
      # the <puppetserver>.yaml generated by 'simp config' is valid YAML,
      # we need to get the file back to the expected spacing before running
      # 'simp bootstrap'. We're doing it here, as a reminder that this
      # is a 'simp config' issue.
      master_yaml_path = "#{puppet_env_dir}/production/data/hosts/#{master_fqdn}.yaml"
      on(master, "sed -i 's/^- /  - /' #{master_yaml_path}")
      on(master, 'simp config -a /root/.simp/simp_conf.yaml --force-config')
    end
  end

  context "'simp bootstrap' redo with no other manifest/hieradata changes" do
    it 'should succeed and retain existing puppet certs with --no-remove_ssldir' do
      on(master, 'rm -f /root/.simp/simp_bootstrap_start_lock')
      on(master, 'simp bootstrap -u --no-remove_ssldir', :pty => true)
      # NOTE: The verification that the Puppet certs have not been
      # modified is done in the examples that follow (i.e., checks
      # for successful puppet agent runs....If the Puppet certs were
      # wiped out, the clients would not be able to communicate with
      # the puppetserver!)
    end

    it 'should re-establish connectivity' do
      agents.each do |agent|
        # FIXME Beaker's ssh connection to a node may have been aggressively
        # terminated by beaker instead of being handled with
        # reconnect-after-timeout logic.
        ensure_ssh_connection(agent)
      end
    end

    it 'agents should still communicate with the puppetserver' do
      on(agents, 'puppet agent -t', :catch_failures => true)
    end
  end

  context 'simp environment new operations without local Git repos' do
    it 'should fail to create an existing environment' do
      on(master, 'simp environment new production', :acceptable_exit_codes => [1])
    end

    it 'should fail create a new env with Puppetfiles when local Git repos are missing' do
      # this will partially create the enviroment before failing....
      on(master, 'simp environment new dev1', :acceptable_exit_codes => [1])
    end

    it 'should create a new environment without Puppetfiles' do
      on(master, 'simp environment new dev2 --no-puppetfile-gen')

      # TODO more extensive verification
      on(master, "test -d #{puppet_env_dir}/dev2")
      on(master, "test ! -e  #{puppet_env_dir}/dev2/Puppetfile")
      on(master, "test ! -e #{puppet_env_dir}/dev2/Puppetfile.simp")
      on(master, "test ! -d #{puppet_env_dir}/dev2/modules")
      on(master, "test -d #{secondary_env_dir}/dev2")
    end

    it 'should fail to create a new env copy of a non-existent env' do
      on(master, 'simp environment new dev3 --copy oops', :acceptable_exit_codes => [1])
    end

    it 'should create a new environment that is a copy of production' do
      on(master, 'simp environment new dev3 --copy production')

      # TODO more extensive verification
      on(master, "test -d #{puppet_env_dir}/dev3")
      on(master, "diff #{puppet_env_dir}/production/Puppetfile #{puppet_env_dir}/dev3/Puppetfile")
      on(master, "test -d #{puppet_env_dir}/dev3/modules")
      on(master, "test -d #{secondary_env_dir}/dev3")
      on(master, "test -d #{writable_env_dir}/dev3")
    end

    it 'should fail to create a new env link of a non-existent env' do
      on(master, 'simp environment new dev4 --copy oops', :acceptable_exit_codes => [1])
    end

    it 'should create a new environment that with links to production' do
      on(master, 'simp environment new dev4 --link production')

      # TODO more extensive verification
      on(master, "test -d  #{puppet_env_dir}/dev4")
      on(master, "diff #{puppet_env_dir}/production/Puppetfile #{puppet_env_dir}/dev4/Puppetfile")
      on(master, "test -d  #{puppet_env_dir}/dev4/modules")
      on(master, "test -L #{secondary_env_dir}/dev4")
      result = on(master, "readlink #{secondary_env_dir}/dev4")
      expect( result.stdout.strip ).to eq "#{secondary_env_dir}/production"
      on(master, "test -L #{writable_env_dir}/dev4")
      result = on(master, "readlink #{writable_env_dir}/dev4")
      expect( result.stdout.strip ).to eq "#{writable_env_dir}/production"
    end
  end
end
